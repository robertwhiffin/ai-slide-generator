"""DATABRICKS CONFIDENTIAL & PROPRIETARY
__________________

Copyright 2025 Databricks, Inc.
All Rights Reserved.

NOTICE:  All information contained herein is, and remains the property of Databricks, Inc.
and its suppliers, if any. The intellectual and technical concepts contained herein are
proprietary to Databricks, Inc. and its suppliers and may be covered by U.S. and foreign patents,
patents in process, and are protected by trade secret and/or copyright law. Dissemination, use,
or reproduction of this information is strictly forbidden unless prior written permission is
obtained from Databricks, Inc.

If you view or obtain a copy of this information and believe Databricks, Inc. may not have
intended it to be made available, please promptly report it to Databricks Legal Department
at legal@databricks.com.
"""

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import databricks.service_credentials.proto.temporary_credential_pb2 as temporary__credential__pb2


class TemporaryCredentialRetrieverServiceStub(object):
    """Service for retrieving temporary credentials. The service is used by PySpark UDFs to
    retrieve temporary credentials for accessing cloud resources.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCredential = channel.unary_unary(
                '/com.databricks.spark.safespark.udf.pb.TemporaryCredentialRetrieverService/GetCredential',
                request_serializer=temporary__credential__pb2.TemporaryCredentialRequest.SerializeToString,
                response_deserializer=temporary__credential__pb2.TemporaryCredentialResponse.FromString,
                )


class TemporaryCredentialRetrieverServiceServicer(object):
    """Service for retrieving temporary credentials. The service is used by PySpark UDFs to
    retrieve temporary credentials for accessing cloud resources.
    """

    def GetCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TemporaryCredentialRetrieverServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCredential,
                    request_deserializer=temporary__credential__pb2.TemporaryCredentialRequest.FromString,
                    response_serializer=temporary__credential__pb2.TemporaryCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.databricks.spark.safespark.udf.pb.TemporaryCredentialRetrieverService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TemporaryCredentialRetrieverService(object):
    """Service for retrieving temporary credentials. The service is used by PySpark UDFs to
    retrieve temporary credentials for accessing cloud resources.
    """

    @staticmethod
    def GetCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.databricks.spark.safespark.udf.pb.TemporaryCredentialRetrieverService/GetCredential',
            temporary__credential__pb2.TemporaryCredentialRequest.SerializeToString,
            temporary__credential__pb2.TemporaryCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
