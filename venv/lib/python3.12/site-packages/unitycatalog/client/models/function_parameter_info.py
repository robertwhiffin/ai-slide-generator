# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from unitycatalog.client.models.column_type_name import ColumnTypeName
from unitycatalog.client.models.function_parameter_mode import FunctionParameterMode
from unitycatalog.client.models.function_parameter_type import FunctionParameterType
from typing import Optional, Set
from typing_extensions import Self

class FunctionParameterInfo(BaseModel):
    """
    FunctionParameterInfo
    """ # noqa: E501
    name: StrictStr = Field(description="Name of parameter.")
    type_text: StrictStr = Field(description="Full data type spec, SQL/catalogString text.")
    type_json: StrictStr = Field(description="Full data type spec, JSON-serialized.")
    type_name: ColumnTypeName
    type_precision: Optional[StrictInt] = Field(default=None, description="Digits of precision; required on Create for DecimalTypes.")
    type_scale: Optional[StrictInt] = Field(default=None, description="Digits to right of decimal; Required on Create for DecimalTypes.")
    type_interval_type: Optional[StrictStr] = Field(default=None, description="Format of IntervalType.")
    position: StrictInt = Field(description="Ordinal position of column (starting at position 0).")
    parameter_mode: Optional[FunctionParameterMode] = None
    parameter_type: Optional[FunctionParameterType] = None
    parameter_default: Optional[StrictStr] = Field(default=None, description="Default value of the parameter.")
    comment: Optional[StrictStr] = Field(default=None, description="User-provided free-form text description.")
    __properties: ClassVar[List[str]] = ["name", "type_text", "type_json", "type_name", "type_precision", "type_scale", "type_interval_type", "position", "parameter_mode", "parameter_type", "parameter_default", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FunctionParameterInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FunctionParameterInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type_text": obj.get("type_text"),
            "type_json": obj.get("type_json"),
            "type_name": obj.get("type_name"),
            "type_precision": obj.get("type_precision"),
            "type_scale": obj.get("type_scale"),
            "type_interval_type": obj.get("type_interval_type"),
            "position": obj.get("position"),
            "parameter_mode": obj.get("parameter_mode"),
            "parameter_type": obj.get("parameter_type"),
            "parameter_default": obj.get("parameter_default"),
            "comment": obj.get("comment")
        })
        return _obj


