# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from unitycatalog.client.models.model_version_status import ModelVersionStatus
from typing import Optional, Set
from typing_extensions import Self

class ModelVersionInfo(BaseModel):
    """
    ModelVersionInfo
    """ # noqa: E501
    model_name: Optional[StrictStr] = Field(default=None, description="The name of the parent registered model of the model version, relative to parent schema")
    catalog_name: Optional[StrictStr] = Field(default=None, description="The name of the catalog containing the model version")
    schema_name: Optional[StrictStr] = Field(default=None, description="The name of the schema containing the model version, relative to parent catalog")
    version: Optional[StrictInt] = Field(default=None, description="Integer model version number, used to reference the model version in API requests.")
    source: Optional[StrictStr] = Field(default=None, description="URI indicating the location of the source artifacts (files) for the model version")
    run_id: Optional[StrictStr] = Field(default=None, description="The run id used by the ML package that generated the model.")
    status: Optional[ModelVersionStatus] = None
    storage_location: Optional[StrictStr] = Field(default=None, description="The storage location on the cloud under which model version data files are stored")
    comment: Optional[StrictStr] = Field(default=None, description="The comment attached to the model version")
    created_at: Optional[StrictInt] = Field(default=None, description="Time at which this model version was created, in epoch milliseconds.")
    created_by: Optional[StrictStr] = Field(default=None, description="The identifier of the user who created the model version")
    updated_at: Optional[StrictInt] = Field(default=None, description="Time at which this model version was last modified, in epoch milliseconds.")
    updated_by: Optional[StrictStr] = Field(default=None, description="The identifier of the user who updated the model version last time")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the model version.")
    __properties: ClassVar[List[str]] = ["model_name", "catalog_name", "schema_name", "version", "source", "run_id", "status", "storage_location", "comment", "created_at", "created_by", "updated_at", "updated_by", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelVersionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelVersionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_name": obj.get("model_name"),
            "catalog_name": obj.get("catalog_name"),
            "schema_name": obj.get("schema_name"),
            "version": obj.get("version"),
            "source": obj.get("source"),
            "run_id": obj.get("run_id"),
            "status": obj.get("status"),
            "storage_location": obj.get("storage_location"),
            "comment": obj.get("comment"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "id": obj.get("id")
        })
        return _obj


